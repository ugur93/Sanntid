package Network

import(
	"fmt"
	"net"
	"time"
	"encoding/json"
	"../Types"
)

const Broadcast_addr="129.241.187.255"

var local_addr string

func UDP_init(Port string,send_ch,receive_ch chan Types.Message){
	
	go UDP_send(Broadcast_addr+":"+Port,send_ch)
	go UDP_receive(":"+Port,receive_ch)
}

func UDP_send(addr string,send_ch chan Types.Message){
	con,err:=net.Dial("udp",addr);
	if err!=nil {
		fmt.Println("Error Dial",err)
	}
	local_addr=con.LocalAddr().String()
	fmt.Println("My ip adress is: ",con.LocalAddr())
	msgAlive:=Types.Message{Message_type: "I am alive"}
	
	for{
		select{
			case msg:=<-send_ch:
				msg.Remote_addr=local_addr
				message,err:=json.Marshal(msg)
				if err!=nil {
					fmt.Println("Error with Marshal: ",err)
				}
				_,err=con.Write([]byte(message))	
				if(err!=nil){
					fmt.Println("Error with Write: ",err)
				}
			default:
				message,err:=json.Marshal(msgAlive)
				if err!=nil {
					fmt.Println("Error with Marshal: ",err)
				}
				_,err=con.Write([]byte(message))	
				if(err!=nil){
					fmt.Println("Error with Write: ",err)
				}
				
			}
		time.Sleep(100*time.Millisecond)
	}	
}

func UDP_receive(port string,receive_ch chan Types.Message){
	addr,err:=net.ResolveUDPAddr("udp",port)
	sock,err:=net.ListenUDP("udp",addr)
	if err!=nil {
		panic(err)
		fmt.Println(err)
	}
	//timeStart:=time.Now();
	msg:=Types.Message{}
	buffer:=make([]byte,1024)
	for{	
		
		
		n,Raddr,err:=sock.ReadFromUDP(buffer)
		if err!=nil{
			fmt.Println(err)
		}
		err=json.Unmarshal(buffer[:n],&msg)
		if err!=nil {
			fmt.Println(err);
		}
		//Check if not reading own message
		if Raddr.String()!=local_addr{
			msg.Remote_addr=Raddr.String();
			receive_ch<-msg
		}
		
		
		
	}
}



